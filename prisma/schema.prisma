// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// ENUMS
// ================================

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INACTIVE
  SUSPENDED
}

enum SubscriptionDuration {
  MONTHLY
  YEARLY
}

enum CategoryType {
  GENERIC
  COLOR
  DIMENSION
  MATERIAL
  FEATURE
  ACCESSORY
  POWER
  TEXT
  FINISH
  CUSTOM
}

enum AttributeType {
  TEXT
  NUMBER
  COLOR
  SELECT
  BOOLEAN
  DIMENSION
  RANGE
}

enum TextColorMode {
  AUTO
  WHITE
  BLACK
  CUSTOM
}

enum QuoteStatus {
  DRAFT
  PENDING
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
  CONVERTED
}

enum FileType {
  IMAGE
  DOCUMENT
  ASSET
  OTHER
}

enum AnalyticsEventType {
  CONFIGURATOR_VIEW
  CONFIGURATOR_INTERACTION
  QUOTE_REQUEST
  CONVERSION
  EMBED_LOAD
}

// ================================
// CLIENT (THE PAYING CUSTOMER)
// ================================

model Client {
  id String @id @default(cuid())

  // Authentication & Profile
  email        String  @unique
  passwordHash String?
  name         String
  companyName  String?
  avatarUrl    String?
  phone        String?

  // OAuth
  googleId String? @unique

  // Email Verification
  emailVerified     Boolean   @default(false)
  emailVerifyToken  String?
  emailVerifySentAt DateTime?

  // Password Reset
  resetToken        String?
  resetTokenExpires DateTime?

  // Billing & Subscription
  subscriptionStatus   SubscriptionStatus    @default(INACTIVE)
  subscriptionDuration SubscriptionDuration?
  stripeCustomerId     String?               @unique
  stripeSubscriptionId String?               @unique
  stripePriceId        String?
  trialEndsAt          DateTime?
  subscriptionEndsAt   DateTime?
  billingEmail         String?
  monthlyPrice         Decimal               @default(99.00) @db.Decimal(10, 2)
  yearlyPrice          Decimal               @default(999.00) @db.Decimal(10, 2)

  // API & Embedding
  apiKey         String   @unique @default(cuid())
  publicKey      String   @unique @default(cuid())
  domain         String?
  allowedDomains String[] @default([])
  embedSettings  Json?

  // Usage Limits & Analytics
  monthlyRequests Int       @default(0)
  requestLimit    Int       @default(1000)
  lastResetAt     DateTime? @default(now())

  // Security
  lastLoginAt         DateTime?
  lastLoginIp         String?
  failedLoginAttempts Int       @default(0)
  lockedUntil         DateTime?

  // Relations
  configurators   Configurator[]
  themes          Theme[]
  emailTemplates  EmailTemplate[]
  quotes          Quote[]
  files           File[]
  analyticsEvents AnalyticsEvent[]
  user            User?

  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([apiKey])
  @@index([publicKey])
  @@index([subscriptionStatus])
  @@index([createdAt])
  @@map("clients")
}

// ================================
// CONFIGURATOR
// ================================

model Configurator {
  id       String @id @default(cuid())
  clientId String
  publicId String @unique @default(cuid())

  // Basic Info
  name        String  @default("Product Configurator")
  description String? @db.Text
  slug        String? @unique

  // Status & Visibility
  isActive    Boolean   @default(true)
  isPublished Boolean   @default(false)
  publishedAt DateTime?

  // Configuration Settings
  themeId        String?
  currency       String  @default("USD")
  currencySymbol String  @default("$")
  language       String  @default("en")
  timezone       String  @default("UTC")

  // SEO & Social
  metaTitle       String?
  metaDescription String? @db.Text
  ogImage         String?

  // Behavior Settings
  allowQuotes  Boolean @default(true)
  requireEmail Boolean @default(true)
  autoPricing  Boolean @default(false)
  showTotal    Boolean @default(true)

  // Access Control
  password    String?
  accessToken String? @unique @default(cuid())

  // Relations
  client     Client           @relation(fields: [clientId], references: [id], onDelete: Cascade)
  theme      Theme?           @relation(fields: [themeId], references: [id], onDelete: SetNull)
  categories Category[]
  quotes     Quote[]
  analytics  AnalyticsEvent[]

  // Audit
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  lastAccessedAt DateTime?

  @@index([clientId])
  @@index([publicId])
  @@index([isActive, isPublished])
  @@index([slug])
  @@index([createdAt])
  @@map("configurators")
}

// ================================
// CATEGORY
// ================================

model Category {
  id             String @id @default(cuid())
  configuratorId String

  // Basic Info
  name         String
  categoryType CategoryType @default(GENERIC)
  description  String?      @db.Text
  helpText     String?      @db.Text

  // Display Settings
  isPrimary  Boolean @default(false)
  isRequired Boolean @default(false)
  orderIndex Int     @default(0)
  icon       String?
  imageUrl   String?

  // Default Option
  defaultOptionId String?

  // Attribute System
  attributesTemplate Json @default("[]")

  // Validation Rules
  validationRules Json?
  minSelections   Int   @default(1)
  maxSelections   Int   @default(1)

  // Pricing Rules
  pricingFormula String?

  // Relations
  configurator Configurator @relation(fields: [configuratorId], references: [id], onDelete: Cascade)
  options      Option[]

  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([configuratorId])
  @@index([configuratorId, orderIndex])
  @@index([categoryType])
  @@map("categories")
}

// ================================
// OPTION
// ================================

model Option {
  id         String @id @default(cuid())
  categoryId String

  // Basic Info
  label       String
  description String?  @db.Text
  sku         String?
  price       Decimal  @db.Decimal(10, 2)
  cost        Decimal? @db.Decimal(10, 2)

  // Media
  imageUrl     String?
  thumbnailUrl String?
  gallery      String[] @default([])

  // Display Settings
  orderIndex Int     @default(0)
  isActive   Boolean @default(true)
  isDefault  Boolean @default(false)
  isPopular  Boolean @default(false)

  // Stock & Availability
  inStock           Boolean @default(true)
  stockQuantity     Int?
  lowStockThreshold Int?    @default(10)

  // Attribute Values
  attributeValues Json @default("{}")

  // Legacy/Specific Fields
  color         String?
  hexColor      String?
  dimensions    Json?
  weight        Decimal? @db.Decimal(10, 2)
  voltage       String?
  wattage       String?
  materialType  String?
  finishType    String?
  textValue     String?
  maxCharacters Int?
  extraData     Json?

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  // Incompatibility
  incompatibleWith OptionIncompatibility[] @relation("OptionIncompatible")
  incompatibleBy   OptionIncompatibility[] @relation("IncompatibleOption")

  // Dependencies
  dependencies OptionDependency[] @relation("OptionDependsOn")
  dependedBy   OptionDependency[] @relation("DependsOnOption")

  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([categoryId, orderIndex])
  @@index([isActive])
  @@index([price])
  @@index([sku])
  @@map("options")
}

// ================================
// OPTION INCOMPATIBILITY
// ================================

model OptionIncompatibility {
  id                   String  @id @default(cuid())
  optionId             String
  incompatibleOptionId String
  severity             String  @default("error")
  message              String?

  option             Option @relation("OptionIncompatible", fields: [optionId], references: [id], onDelete: Cascade)
  incompatibleOption Option @relation("IncompatibleOption", fields: [incompatibleOptionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([optionId, incompatibleOptionId])
  @@index([optionId])
  @@index([incompatibleOptionId])
  @@map("option_incompatibilities")
}

// ================================
// OPTION DEPENDENCY
// ================================

model OptionDependency {
  id                String @id @default(cuid())
  optionId          String
  dependsOnOptionId String
  dependencyType    String @default("requires")

  option          Option @relation("OptionDependsOn", fields: [optionId], references: [id], onDelete: Cascade)
  dependsOnOption Option @relation("DependsOnOption", fields: [dependsOnOptionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([optionId, dependsOnOptionId])
  @@index([optionId])
  @@index([dependsOnOptionId])
  @@map("option_dependencies")
}

// ================================
// THEME
// ================================

model Theme {
  id       String @id @default(cuid())
  clientId String

  // Theme Info
  name        String
  description String? @db.Text
  isDefault   Boolean @default(false)

  // Color Scheme
  primaryColor    String        @default("220 70% 50%")
  secondaryColor  String        @default("340 70% 50%")
  accentColor     String        @default("280 70% 50%")
  backgroundColor String        @default("0 0% 100%")
  surfaceColor    String        @default("0 0% 98%")
  textColor       String        @default("0 0% 10%")
  textColorMode   TextColorMode @default(AUTO)
  customTextColor String?

  // Typography
  fontFamily  String  @default("Inter, sans-serif")
  headingFont String?
  bodyFont    String?

  // Layout
  borderRadius String @default("0.5rem")
  spacingUnit  String @default("1rem")
  maxWidth     String @default("1200px")

  // Custom CSS
  customCSS String? @db.Text

  // Status
  isActive Boolean @default(true)

  // Relations
  client        Client         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  configurators Configurator[]

  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@index([clientId, isActive])
  @@index([isDefault])
  @@map("themes")
}

// ================================
// EMAIL TEMPLATE
// ================================

model EmailTemplate {
  id       String @id @default(cuid())
  clientId String

  // Template Info
  name        String
  subject     String
  body        String  @db.Text
  previewText String? @db.Text

  // Theme & Styling
  inheritThemeColors Boolean @default(true)
  templateType       String  @default("quote")

  // Metadata
  isDefault Boolean @default(false)
  isActive  Boolean @default(true)

  // Relations
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([clientId, name])
  @@index([clientId])
  @@index([clientId, isDefault])
  @@index([templateType])
  @@map("email_templates")
}

// ================================
// QUOTE
// ================================

model Quote {
  id             String  @id @default(cuid())
  clientId       String
  configuratorId String?

  // Customer Info
  customerEmail   String
  customerName    String?
  customerPhone   String?
  customerCompany String?
  customerAddress Json?

  // Configuration Snapshot
  title           String?
  selectedOptions Json
  configuration   Json?
  totalPrice      Decimal  @db.Decimal(10, 2)
  subtotal        Decimal? @db.Decimal(10, 2)
  taxRate         Decimal? @db.Decimal(5, 4)
  taxAmount       Decimal? @db.Decimal(10, 2)

  // Quote Details
  quoteCode     String      @unique @default(cuid())
  status        QuoteStatus @default(PENDING)
  internalNotes String?     @db.Text
  customerNotes String?     @db.Text
  adminNotes    String?     @db.Text

  // Validity & Expiry
  validUntil DateTime?
  expiresAt  DateTime?

  // Email Tracking
  emailSentAt        DateTime?
  lastReminderSentAt DateTime?
  openCount          Int       @default(0)
  lastOpenedAt       DateTime?

  // Relations
  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  configurator Configurator? @relation(fields: [configuratorId], references: [id], onDelete: SetNull)

  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@index([configuratorId])
  @@index([customerEmail])
  @@index([quoteCode])
  @@index([status])
  @@index([createdAt])
  @@index([clientId, createdAt(sort: Desc)])
  @@map("quotes")
}

// ================================
// FILE UPLOADS
// ================================

model File {
  id       String @id @default(cuid())
  clientId String

  // File Info
  filename     String
  originalName String
  fileType     FileType
  mimeType     String
  size         Int
  key          String
  url          String

  // Metadata
  altText  String?
  caption  String?
  metadata Json?

  // Access Control
  isPublic    Boolean @default(false)
  accessToken String? @unique @default(cuid())

  // Relations
  client Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
  @@index([fileType])
  @@index([isPublic])
  @@index([createdAt])
  @@map("files")
}

// ================================
// ANALYTICS EVENTS
// ================================

model AnalyticsEvent {
  id             String  @id @default(cuid())
  clientId       String
  configuratorId String?

  // Event Info
  eventType AnalyticsEventType
  eventName String
  sessionId String?

  // User & Device Info
  userAgent String?
  ipAddress String?
  country   String?
  region    String?
  city      String?

  // Page & Referrer
  path     String?
  referrer String?
  domain   String?

  // Event Data
  metadata Json?

  // Relations
  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  configurator Configurator? @relation(fields: [configuratorId], references: [id], onDelete: SetNull)

  // Timestamps
  createdAt DateTime @default(now())

  @@index([clientId])
  @@index([configuratorId])
  @@index([eventType])
  @@index([createdAt])
  @@index([sessionId])
  @@map("analytics_events")
}

// ================================
// API USAGE LOGS
// ================================

model ApiLog {
  id       String  @id @default(cuid())
  clientId String?

  // Request Info
  method     String
  path       String
  statusCode Int
  userAgent  String?
  ipAddress  String?

  // Performance
  responseTime Int
  requestSize  Int?
  responseSize Int?

  // Authentication
  apiKeyId String?
  userId   String?

  // Error Tracking
  errorMessage String?
  errorStack   String?

  // Timestamps
  createdAt DateTime @default(now())

  @@index([clientId])
  @@index([method])
  @@index([statusCode])
  @@index([createdAt])
  @@index([apiKeyId])
  @@map("api_logs")
}

// ================================
// NEXT-AUTH MODELS
// ================================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  clientId      String?   @unique

  // Relations
  client   Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
